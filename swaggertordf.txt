# Swagger to RDF/XML Ontology Mapping Guide

This document provides a comprehensive explanation of how the Enhanced Swagger to RDF Converter maps Swagger/OpenAPI elements to RDF/XML ontology components. This mapping enables a complete representation of APIs in ontology format, preserving all relationships and attributes.

## Table of Contents

1. [Core Mapping Concepts](#core-mapping-concepts)
2. [API Title and Info](#api-title-and-info)
3. [Controllers (Tags)](#controllers-tags) 
4. [Endpoints (Paths)](#endpoints-paths)
5. [Parameters](#parameters)
6. [Request Bodies](#request-bodies)
7. [Responses](#responses)
8. [Schemas (Data Models)](#schemas-data-models)
9. [Properties (Attributes)](#properties-attributes)
10. [Security Schemes](#security-schemes)
11. [Examples and Enums](#examples-and-enums)
12. [Relationships Between Components](#relationships-between-components)

## Core Mapping Concepts

The converter uses these fundamental mapping patterns:

| Swagger Element | RDF/XML Representation |
|----------------|------------------------|
| API | `owl:Ontology` |
| Controllers/Tags | `owl:Class` (subclass of API title) |
| Paths/Endpoints | `owl:Class` (subclass of relevant Controller) |
| Parameters | `owl:Class` with individuals for each parameter |
| Request Bodies | `owl:Class` with individuals for each request body |
| Responses | `owl:Class` with individuals for each response |
| Schemas | `owl:Class` (subclasses based on controller association) |
| Schema Properties | `owl:DatatypeProperty` or `owl:ObjectProperty` |
| Security Schemes | `owl:Class` with individuals for each scheme |

Each element preserves its metadata (descriptions, requirements, etc.) using appropriate RDF annotations.

## API Title and Info

### Swagger Input:
```json
{
  "openapi": "3.0.1",
  "info": {
    "title": "Bob-Wrapper-Service",
    "description": "Bob-Wrapper-Service controller",
    "version": "v1.0"
  }
}
```

### RDF/XML Output:
```xml
<owl:Ontology rdf:about="https://w3id.org/api/bob-wrapper-service/">
    <owl:versionIRI rdf:resource="https://w3id.org/api/bob-wrapper-service/v1.0/"/>
    <dc:description xml:lang="en">Bob-Wrapper-Service controller</dc:description>
    <dc:title xml:lang="en">Bob-Wrapper-Service API Ontology</dc:title>
    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#string">v1.0</owl:versionInfo>
</owl:Ontology>

<!-- Title Class -->
<owl:Class rdf:about="https://w3id.org/api/bob-wrapper-service/bob-wrapper-service">
    <rdfs:label xml:lang="en">Bob-Wrapper-Service</rdfs:label>
    <dc:description xml:lang="en">Bob-Wrapper-Service controller</dc:description>
    <dc:title xml:lang="en">Bob-Wrapper-Service</dc:title>
</owl:Class>
```

The API title becomes both the base URI of the ontology and a root class for all other components.

## Controllers (Tags)

### Swagger Input:
```json
{
  "tags": [
    {
      "name": "Camunda Controller",
      "description": "Operations for Camunda workflow engine"
    }
  ]
}
```

### RDF/XML Output:
```xml
<owl:Class rdf:about="https://w3id.org/api/bob-wrapper-service/camunda-controller">
    <rdfs:label xml:lang="en">Camunda Controller</rdfs:label>
    <rdfs:comment xml:lang="en">Operations for Camunda workflow engine</rdfs:comment>
    <dc:description xml:lang="en">API Controller</dc:description>
    <rdfs:subClassOf rdf:resource="https://w3id.org/api/bob-wrapper-service/bob-wrapper-service"/>
</owl:Class>
```

Each controller (tag) is represented as a class that inherits from the API title class, creating a class hierarchy that mirrors the API's logical structure.

## Endpoints (Paths)

### Swagger Input:
```json
{
  "paths": {
    "/v1.0/wrapper/deploy/{wfId}": {
      "post": {
        "tags": ["Camunda Controller"],
        "summary": "Deploy Workflow",
        "operationId": "deployWorkflow",
        "parameters": [...]
      }
    }
  }
}
```

### RDF/XML Output:
```xml
<owl:Class rdf:about="https://w3id.org/api/bob-wrapper-service/deployworkflow">
    <rdfs:label xml:lang="en">Deploy Workflow</rdfs:label>
    <rdfs:comment xml:lang="en">Deploy a workflow to the Camunda engine</rdfs:comment>
    <dc:method xml:lang="en">POST</dc:method>
    <dc:path xml:lang="en">/v1.0/wrapper/deploy/{wfId}</dc:path>
    <dc:operationId xml:lang="en">deployWorkflow</dc:operationId>
    <o2o:endpoint>POST /v1.0/wrapper/deploy/{wfId}</o2o:endpoint>
    <rdfs:subClassOf rdf:resource="https://w3id.org/api/bob-wrapper-service/camunda-controller"/>
</owl:Class>
```

Each endpoint becomes a class inheriting from its controller, with annotations for the HTTP method, path, operation ID, and a combined endpoint representation. This preserves the full API path structure.

## Parameters

### Swagger Input:
```json
{
  "parameters": [
    {
      "name": "wfId",
      "in": "path",
      "description": "ID of the workflow to be deployed.",
      "required": true,
      "schema": {
        "type": "string"
      }
    },
    {
      "name": "sync",
      "in": "query",
      "description": "Flag indicating if the deployment should be synchronous.",
      "required": false,
      "schema": {
        "type": "boolean",
        "default": false
      }
    }
  ]
}
```

### RDF/XML Output:
```xml
<!-- Parameter Base Classes -->
<owl:Class rdf:about="https://w3id.org/api/bob-wrapper-service/Parameter">
    <rdfs:label xml:lang="en">Parameter</rdfs:label>
    <rdfs:comment xml:lang="en">Base class for all API parameters</rdfs:comment>
</owl:Class>

<owl:Class rdf:about="https://w3id.org/api/bob-wrapper-service/PathParameter">
    <rdfs:label xml:lang="en">PathParameter</rdfs:label>
    <rdfs:comment xml:lang="en">Parameter that appears in the path</rdfs:comment>
    <rdfs:subClassOf rdf:resource="https://w3id.org/api/bob-wrapper-service/Parameter"/>
</owl:Class>

<owl:Class rdf:about="https://w3id.org/api/bob-wrapper-service/QueryParameter">
    <rdfs:label xml:lang="en">QueryParameter</rdfs:label>
    <rdfs:comment xml:lang="en">Parameter that appears in the query</rdfs:comment>
    <rdfs:subClassOf rdf:resource="https://w3id.org/api/bob-wrapper-service/Parameter"/>
</owl:Class>

<!-- Parameter Instances -->
<owl:NamedIndividual rdf:about="https://w3id.org/api/bob-wrapper-service/post-v10wrapperdeploy-wfid-param-wfid">
    <rdf:type rdf:resource="https://w3id.org/api/bob-wrapper-service/PathParameter"/>
    <rdfs:label xml:lang="en">wfId</rdfs:label>
    <dc:description xml:lang="en">ID of the workflow to be deployed.</dc:description>
    <dc:parameterIn xml:lang="en">path</dc:parameterIn>
    <dc:required xml:lang="en">true</dc:required>
    <dc:format xml:lang="en">string</dc:format>
    <api:belongsToEndpoint rdf:resource="https://w3id.org/api/bob-wrapper-service/deployworkflow"/>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="https://w3id.org/api/bob-wrapper-service/post-v10wrapperdeploy-wfid-param-sync">
    <rdf:type rdf:resource="https://w3id.org/api/bob-wrapper-service/QueryParameter"/>
    <rdfs:label xml:lang="en">sync</rdfs:label>
    <dc:description xml:lang="en">Flag indicating if the deployment should be synchronous.</dc:description>
    <dc:parameterIn xml:lang="en">query</dc:parameterIn>
    <dc:required xml:lang="en">false</dc:required>
    <dc:format xml:lang="en">boolean</dc:format>
    <api:belongsToEndpoint rdf:resource="https://w3id.org/api/bob-wrapper-service/deployworkflow"/>
</owl:NamedIndividual>
```

Parameters are represented using a class hierarchy for different parameter types (path, query, header, etc.). Individual parameter instances are created as named individuals with explicit relationships to their endpoints. All parameter metadata (name, description, type, required status) is preserved.

## Request Bodies

### Swagger Input:
```json
{
  "requestBody": {
    "required": true,
    "content": {
      "application/json": {
        "schema": {
          "$ref": "#/components/schemas/DeploymentWorkflowRequest"
        }
      }
    }
  }
}
```

### RDF/XML Output:
```xml
<!-- Request Body Base Class -->
<owl:Class rdf:about="https://w3id.org/api/bob-wrapper-service/RequestBody">
    <rdfs:label xml:lang="en">Request Body</rdfs:label>
    <rdfs:comment xml:lang="en">Base class for all API request bodies</rdfs:comment>
</owl:Class>

<!-- Request Body Instance -->
<owl:NamedIndividual rdf:about="https://w3id.org/api/bob-wrapper-service/post-v10wrapperdeploy-wfid-request-body">
    <rdf:type rdf:resource="https://w3id.org/api/bob-wrapper-service/RequestBody"/>
    <rdfs:label xml:lang="en">Request Body for deployWorkflow</rdfs:label>
    <dc:description xml:lang="en">Request body for deploying a workflow</dc:description>
    <dc:required xml:lang="en">true</dc:required>
    <dc:mediaType xml:lang="en">application/json</dc:mediaType>
    <api:hasSchema rdf:resource="https://w3id.org/api/bob-wrapper-service/DeploymentWorkflowRequest"/>
    <api:belongsToEndpoint rdf:resource="https://w3id.org/api/bob-wrapper-service/deployworkflow"/>
</owl:NamedIndividual>
```

Request bodies are modeled as individuals of the RequestBody class, linked to their endpoint and schema. The content type and required status are preserved as annotations.

## Responses

### Swagger Input:
```json
{
  "responses": {
    "200": {
      "description": "Success",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/DeploymentWorkflowResponse"
          }
        }
      }
    },
    "401": {
      "description": "Unauthorized",
      "content": {
        "application/json": {
          "schema": {
            "type": "string"
          }
        }
      }
    }
  }
}
```

### RDF/XML Output:
```xml
<!-- Response Base Classes -->
<owl:Class rdf:about="https://w3id.org/api/bob-wrapper-service/Response">
    <rdfs:label xml:lang="en">Response</rdfs:label>
    <rdfs:comment xml:lang="en">Base class for all API responses</rdfs:comment>
</owl:Class>

<owl:Class rdf:about="https://w3id.org/api/bob-wrapper-service/SuccessResponse">
    <rdfs:label xml:lang="en">SuccessResponse</rdfs:label>
    <rdfs:comment xml:lang="en">Response with status code 200</rdfs:comment>
    <rdfs:subClassOf rdf:resource="https://w3id.org/api/bob-wrapper-service/Response"/>
    <dc:statusCode xml:lang="en">200</dc:statusCode>
</owl:Class>

<owl:Class rdf:about="https://w3id.org/api/bob-wrapper-service/UnauthorizedResponse">
    <rdfs:label xml:lang="en">UnauthorizedResponse</rdfs:label>
    <rdfs:comment xml:lang="en">Response with status code 401</rdfs:comment>
    <rdfs:subClassOf rdf:resource="https://w3id.org/api/bob-wrapper-service/Response"/>
    <dc:statusCode xml:lang="en">401</dc:statusCode>
</owl:Class>

<!-- Response Instances -->
<owl:NamedIndividual rdf:about="https://w3id.org/api/bob-wrapper-service/post-v10wrapperdeploy-wfid-response-200">
    <rdf:type rdf:resource="https://w3id.org/api/bob-wrapper-service/SuccessResponse"/>
    <rdfs:label xml:lang="en">Response 200 for deployWorkflow</rdfs:label>
    <dc:description xml:lang="en">Success</dc:description>
    <dc:statusCode xml:lang="en">200</dc:statusCode>
    <dc:mediaType xml:lang="en">application/json</dc:mediaType>
    <api:hasSchema rdf:resource="https://w3id.org/api/bob-wrapper-service/DeploymentWorkflowResponse"/>
    <api:belongsToEndpoint rdf:resource="https://w3id.org/api/bob-wrapper-service/deployworkflow"/>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="https://w3id.org/api/bob-wrapper-service/post-v10wrapperdeploy-wfid-response-401">
    <rdf:type rdf:resource="https://w3id.org/api/bob-wrapper-service/UnauthorizedResponse"/>
    <rdfs:label xml:lang="en">Response 401 for deployWorkflow</rdfs:label>
    <dc:description xml:lang="en">Unauthorized</dc:description>
    <dc:statusCode xml:lang="en">401</dc:statusCode>
    <dc:mediaType xml:lang="en">application/json</dc:mediaType>
    <api:belongsToEndpoint rdf:resource="https://w3id.org/api/bob-wrapper-service/deployworkflow"/>
</owl:NamedIndividual>
```

Responses follow a pattern similar to request bodies, with a class hierarchy for different response types based on status codes. Each response is an individual linked to its endpoint and schema, with status code and content type preserved.

## Schemas (Data Models)

### Swagger Input:
```json
{
  "components": {
    "schemas": {
      "DeploymentWorkflowResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the deployment was successful."
          },
          "deploymentId": {
            "type": "string",
            "description": "Unique identifier for the deployed workflow."
          },
          "message": {
            "type": "string",
            "description": "Message providing additional information."
          }
        },
        "description": "Response object representing the outcome of a deployment."
      }
    }
  }
}
```

### RDF/XML Output:
```xml
<owl:Class rdf:about="https://w3id.org/api/bob-wrapper-service/DeploymentWorkflowResponse">
    <rdfs:label xml:lang="en">DeploymentWorkflowResponse</rdfs:label>
    <dc:description xml:lang="en">Response object representing the outcome of a deployment.</dc:description>
    <rdfs:subClassOf rdf:resource="https://w3id.org/api/bob-wrapper-service/camunda-controller"/>
</owl:Class>
```

Each schema is represented as a class in the ontology. The schema's subclass relationship is determined based on which controller's endpoints use it, creating a logical domain structure. All schema metadata is preserved.

## Properties (Attributes)

### Data Properties (Simple Types)

#### RDF/XML Output:
```xml
<owl:DatatypeProperty rdf:about="https://w3id.org/api/bob-wrapper-service/success">
    <rdfs:label xml:lang="en">success</rdfs:label>
    <rdfs:comment xml:lang="en">Indicates whether the deployment was successful.</rdfs:comment>
    <rdfs:domain rdf:resource="https://w3id.org/api/bob-wrapper-service/DeploymentWorkflowResponse"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>
    <dc:required xml:lang="en">false</dc:required>
</owl:DatatypeProperty>

<owl:DatatypeProperty rdf:about="https://w3id.org/api/bob-wrapper-service/deploymentId">
    <rdfs:label xml:lang="en">deploymentId</rdfs:label>
    <rdfs:comment xml:lang="en">Unique identifier for the deployed workflow.</rdfs:comment>
    <rdfs:domain rdf:resource="https://w3id.org/api/bob-wrapper-service/DeploymentWorkflowResponse"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <dc:required xml:lang="en">false</dc:required>
</owl:DatatypeProperty>

<owl:DatatypeProperty rdf:about="https://w3id.org/api/bob-wrapper-service/message">
    <rdfs:label xml:lang="en">message</rdfs:label>
    <rdfs:comment xml:lang="en">Message providing additional information.</rdfs:comment>
    <rdfs:domain rdf:resource="https://w3id.org/api/bob-wrapper-service/DeploymentWorkflowResponse"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <dc:required xml:lang="en">false</dc:required>
</owl:DatatypeProperty>
```

Simple properties (strings, numbers, booleans) are represented as `owl:DatatypeProperty` with appropriate XML Schema data types. The domain links the property to its schema class, preserving the structure of the data model.

### Object Properties (Complex Types)

#### Swagger Input:
```json
{
  "components": {
    "schemas": {
      "Order": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          }
        }
      }
    }
  }
}
```

#### RDF/XML Output:
```xml
<owl:ObjectProperty rdf:about="https://w3id.org/api/bob-wrapper-service/items">
    <rdfs:label xml:lang="en">items</rdfs:label>
    <rdfs:comment xml:lang="en">The items in the order.</rdfs:comment>
    <rdfs:domain rdf:resource="https://w3id.org/api/bob-wrapper-service/Order"/>
    <rdfs:range rdf:resource="https://w3id.org/api/bob-wrapper-service/OrderItem"/>
    <dc:required xml:lang="en">false</dc:required>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
</owl:ObjectProperty>
```

Properties that reference other schemas are represented as `owl:ObjectProperty` with domains and ranges that preserve the relationships between data models. Collection properties (arrays) are marked with functional property type.

## Security Schemes

### Swagger Input:
```json
{
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}
```

### RDF/XML Output:
```xml
<!-- Security Scheme Classes -->
<owl:Class rdf:about="https://w3id.org/api/bob-wrapper-service/SecurityScheme">
    <rdfs:label xml:lang="en">Security Scheme</rdfs:label>
    <rdfs:comment xml:lang="en">Base class for API security schemes</rdfs:comment>
</owl:Class>

<owl:Class rdf:about="https://w3id.org/api/bob-wrapper-service/HttpSecurityScheme">
    <rdfs:label xml:lang="en">HttpSecurityScheme</rdfs:label>
    <rdfs:comment xml:lang="en">http security scheme</rdfs:comment>
    <rdfs:subClassOf rdf:resource="https://w3id.org/api/bob-wrapper-service/SecurityScheme"/>
</owl:Class>

<!-- Security Scheme Instance -->
<owl:NamedIndividual rdf:about="https://w3id.org/api/bob-wrapper-service/SecurityScheme_bearerauth">
    <rdf:type rdf:resource="https://w3id.org/api/bob-wrapper-service/HttpSecurityScheme"/>
    <rdfs:label xml:lang="en">bearerAuth</rdfs:label>
    <dc:description xml:lang="en">HTTP bearer authentication</dc:description>
    <rdfs:comment xml:lang="en">Bearer format: JWT</rdfs:comment>
</owl:NamedIndividual>

<!-- API Security -->
<owl:Class rdf:about="https://w3id.org/api/bob-wrapper-service/ApiSecurity">
    <rdfs:label xml:lang="en">API Security</rdfs:label>
    <rdfs:comment xml:lang="en">Security requirements for the API</rdfs:comment>
    <rdfs:subClassOf rdf:resource="https://w3id.org/api/bob-wrapper-service/bob-wrapper-service"/>
</owl:Class>

<owl:NamedIndividual rdf:about="https://w3id.org/api/bob-wrapper-service/ApiSecurityRequirements">
    <rdf:type rdf:resource="https://w3id.org/api/bob-wrapper-service/ApiSecurity"/>
    <rdfs:label xml:lang="en">API Security Requirements</rdfs:label>
    <api:hasSecurityRequirement rdf:resource="https://w3id.org/api/bob-wrapper-service/SecurityScheme_bearerauth"/>
</owl:NamedIndividual>
```

Security schemes are modeled using a class hierarchy for different security types, with individual instances for each defined scheme. API-level security requirements are modeled with a special class and individual that links to the required security schemes.

## Examples and Enums

### Swagger Input:
```json
{
  "components": {
    "schemas": {
      "Status": {
        "type": "string",
        "enum": ["PENDING", "ACTIVE", "COMPLETED"]
      },
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "example": {
          "name": "John Doe"
        }
      }
    }
  }
}
```

### RDF/XML Output:
```xml
<!-- Enum Values as Individuals -->
<owl:NamedIndividual rdf:about="https://w3id.org/api/bob-wrapper-service/Status_PENDING">
    <rdf:type rdf:resource="https://w3id.org/api/bob-wrapper-service/Status"/>
    <rdfs:label xml:lang="en">PENDING</rdfs:label>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="https://w3id.org/api/bob-wrapper-service/Status_ACTIVE">
    <rdf:type rdf:resource="https://w3id.org/api/bob-wrapper-service/Status"/>
    <rdfs:label xml:lang="en">ACTIVE</rdfs:label>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="https://w3id.org/api/bob-wrapper-service/Status_COMPLETED">
    <rdf:type rdf:resource="https://w3id.org/api/bob-wrapper-service/Status"/>
    <rdfs:label xml:lang="en">COMPLETED</rdfs:label>
</owl:NamedIndividual>

<!-- Example as Individual -->
<owl:NamedIndividual rdf:about="https://w3id.org/api/bob-wrapper-service/User_Example">
    <rdf:type rdf:resource="https://w3id.org/api/bob-wrapper-service/User"/>
    <rdfs:label xml:lang="en">User Example</rdfs:label>
    <api:name>John Doe</api:name>
</owl:NamedIndividual>
```

Enum values and examples are represented as named individuals in the ontology, allowing for concrete instances of each schema to be represented. Examples include property values matching the schema definition.

## Relationships Between Components

The ontology creates a rich web of relationships between components:

1. **Controller to Endpoint Relationships**:
   ```xml
   <owl:ObjectProperty rdf:about="https://w3id.org/api/bob-wrapper-service/hasCamundaControllerEndpoint">
       <rdfs:label xml:lang="en">has Camunda Controller endpoint</rdfs:label>
       <rdfs:domain rdf:resource="https://w3id.org/api/bob-wrapper-service/camunda-controller"/>
       <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
   </owl:ObjectProperty>
   ```

2. **Endpoint to Parameter Relationships**:
   ```xml
   <api:belongsToEndpoint rdf:resource="https://w3id.org/api/bob-wrapper-service/deployworkflow"/>
   ```

3. **Endpoint to Request Body Relationships**:
   ```xml
   <owl:ObjectProperty rdf:about="https://w3id.org/api/bob-wrapper-service/hasdeployworkflowRequestBody">
       <rdfs:label xml:lang="en">has request body</rdfs:label>
       <rdfs:domain rdf:resource="https://w3id.org/api/bob-wrapper-service/deployworkflow"/>
       <rdfs:range rdf:resource="https://w3id.org/api/bob-wrapper-service/post-v10wrapperdeploy-wfid-request-body"/>
   </owl:ObjectProperty>
   ```

4. **Endpoint to Response Relationships**:
   ```xml
   <owl:ObjectProperty rdf:about="https://w3id.org/api/bob-wrapper-service/hasdeployworkflowResponse">
       <rdfs:label xml:lang="en">has response</rdfs:label>
       <rdfs:domain rdf:resource="https://w3id.org/api/bob-wrapper-service/deployworkflow"/>
       <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
   </owl:ObjectProperty>
   ```

5. **Schema Property Relationships**:
   ```xml
   <rdfs:domain rdf:resource="https://w3id.org/api/bob-wrapper-service/DeploymentWorkflowResponse"/>
   <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
   ```

6. **Schema to Controller Association**:
   ```xml
   <rdfs:subClassOf rdf:resource="https://w3id.org/api/bob-wrapper-service/camunda-controller"/>
   ```

These relationships create a complete semantic graph of the API structure, preserving all dependencies and connections between components.

## Conclusion

The Enhanced Swagger to RDF Converter creates a comprehensive ontology representation of Swagger/OpenAPI specifications, capturing all elements and their relationships. This mapping preserves the full structure of APIs with controllers, endpoints, parameters, request bodies, responses, schemas, properties, and security requirements, enabling potential round-trip conversion between formats.

By modeling each component with appropriate OWL constructs and establishing rich relationships between them, the ontology becomes a complete semantic representation of the API that can be queried, analyzed, and potentially transformed back into Swagger format.